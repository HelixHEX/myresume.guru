// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscription {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId              String    @unique
  status              String
  plan                String
  priceId             String
  polarCustomerId     String
  polarSubscriptionId String    @unique
  endsAt              DateTime?
}

model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String

  messages Message[]
  resumes  Resume[]
}

model Resume {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  userId    String
  fileKey   String?   @unique
  status    String   @default("Not analyzed")
  text      String?
  analysis  Json?    @map("analysis_json")

  candidateName     String?  @map("candidate_name")
  candidateEmail    String?  @map("candidate_email")
  candidatePhone    String?  @map("candidate_phone")
  candidateLocation String?  @map("candidate_location")
  technicalSkills   String[] @map("technical_skills")
  companies         String[] @map("companies_worked")
  jobTitles         String[] @map("job_titles")
  education         String[] @map("education_institutions")

  firstName      String? 
  lastName       String? 
  email          String? 
  phone          String? 
  location       String? 
  website        String? 
  github         String? 
  linkedin       String?
  twitter        String? 
  summary        String? 
  skills         String?
  workExperience Json[] @map("work_experience")
  education_new  Json[] @map("education")
  projects       Json[] @map("projects")
  certifications Json[] @map("certifications")

  applications        Application[]        @relation("ApplicationToResume")
  activeApplications  Application[]        @relation("CurrentResume")
  feedbacks           Feedback[]
  applicationScores   ApplicationScore[]
  actionableFeedbacks ActionableFeedback[]
  messages            Message[]
  improvements        Improvement[]        @relation("ResumeToImprovements")
  chat                Chat?                @relation(fields: [chatId], references: [id])
  chatId              Int?
}

model Company {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  userId    String
  website   String?

  applications Application[]
}

model Application {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userId      String
  title       String
  url         String
  status      String   @default("active")
  aiStatus    String   @default("not-started")
  description String

  currentResume       Resume?              @relation("CurrentResume", fields: [resumeId], references: [id])
  resumeId            Int?
  resumes             Resume[]             @relation("ApplicationToResume")
  company             Company?             @relation(fields: [companyId], references: [id])
  companyId           Int?
  feedbacks           Feedback[]
  applicationScores   ApplicationScore[]
  actionableFeedbacks ActionableFeedback[]
  messages            Message[]
}

model Feedback {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String
  type      String   @default("improvement") // Only improvement type now
  title     String
  text      String?
  priority  Int      @default(0) // Higher number = higher priority
  status    String   @default("active")
  impact    String? // The potential impact of implementing this feedback
  section   String? // Which section of the resume this feedback relates to

  application         Application?         @relation(fields: [applicationId], references: [id])
  applicationId       String?
  resume              Resume?              @relation(fields: [resumeId], references: [id])
  resumeId            Int?
  actionableFeedbacks ActionableFeedback[]

  @@index([type])
  @@index([priority])
  @@index([section])
  @@index([status])
}

model ApplicationScore {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userId      String
  title       String
  score       Int
  description String?

  application   Application? @relation(fields: [applicationId], references: [id])
  applicationId String?
  resume        Resume?      @relation(fields: [resumeId], references: [id])
  resumeId      Int?
}

model ActionableFeedback {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  userId          String
  title           String
  text            String
  status          String   @default("not-done")
  priority        Int      @default(0)
  difficultyLevel String   @default("medium") @map("difficulty_level") // easy, medium, hard
  stepsList       Json?    @map("steps_list") // Array of specific steps to implement this feedback

  feedback      Feedback?    @relation(fields: [feedbackId], references: [id])
  feedbackId    Int?
  application   Application? @relation(fields: [applicationId], references: [id])
  applicationId String?
  resume        Resume?      @relation(fields: [resumeId], references: [id])
  resumeId      Int?

  @@index([status])
  @@index([priority])
  @@index([difficultyLevel])
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String
  content   String
  role      String

  chat          Chat?        @relation(fields: [chatId], references: [id])
  chatId        Int?
  application   Application? @relation(fields: [applicationId], references: [id])
  applicationId String?
  resume        Resume?      @relation(fields: [resumeId], references: [id])
  resumeId      Int?
}

model Improvement {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  title     String
  text      String // This will now contain the actionable feedback directly
  priority  Int
  status    String   @default("active")
  resumeId  Int
  resume    Resume   @relation("ResumeToImprovements", fields: [resumeId], references: [id])
}
